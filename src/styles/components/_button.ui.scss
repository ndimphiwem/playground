/** @COMPONENT **/

// Button Sizes 
$button-sizes: (
  sm: 7px 12px,
  md: 14px 14px,
  lg:  14px 24px,
  xtra: 16px 30px
) !default;

 // Button Block
.c-btn {
  $this: &;
  @extend %button;
  @include transition(all);

  @mixin make-outline(
    $color, 
    $active-background: $color, 
    $active-border: $color
  ) {
    color: $color;
    background-color: transparent;
    background-image: none;
    border-color: $color;

    @include hover {
      color: $white-color;
      background-color: $active-background;
      border-color: $active-border;
    }
 }

  &__default {
    background-color: $default-color;
    @include hover {
      border-color: $default-color;
      background-color: $white-color;
      color: $default-color;
    }
  }

  &__primary {
    background-color: $btn-primary;

    &--#{$theme} {
      background-color: $btn-primary;     
    }

    @include hover {
      border-color: $btn-primary;
      background-color: $white-color;
      color: $btn-primary;
    }

    &--outline {
      @include make-outline(
       $btn-primary, 
       $active-background: $btn-primary, 
       $active-border: $btn-primary
      );
    }
  }

  &__secondary {
    background-color: $secondary-color;
    @include hover {
      border-color: $secondary-color;
      background-color: $white-color;
      color: $secondary-color;
    }

    &--outline {
      @include make-outline(
       $secondary-color, 
       $active-background: $secondary-color, 
       $active-border: $secondary-color
      );
    }
  }

  &__success {
    background-color: $success-color;
    @include hover {
      border-color: $success-color;
      background-color: $white-color;
      color: $success-color;
    }
  }

  &__warning {
    background-color: $warning-color;
    @include hover {
      border-color: $warning-color;
      background-color: $white-color;
      color: $warning-color;
    }
    &--outline {
      @include make-outline(
       $warning-color, 
       $active-background: $warning-color, 
       $active-border: $warning-color
      );
    }
  }

  &__danger {
    background-color: $danger-color;
    @include hover {
      border-color: $danger-color;
      background-color: $white-color;
      color: $danger-color;
    }
  }

  &__link {
    $sty: &;
    background: none; 
    border: 0;
    text-decoration: none;

    @include hover {
      color: $body-color;
      text-decoration: underline;
    }

    @include focus {
      color: $white-color;
    }

    /** Inheriting From c-btn__link 
    * Then Modifying the hover state
    **/
    // &--#{$theme} {
    //   @extend #{$this}__link;
    //   @include hover {
    //     color: $btn-primary; // This needs to come from theme vars
    //   }     
    // }
  }

  &__feed {
    display: flex;
    @extend .u-grid-justify--between;
    width: 100%;
    padding: $size-0 $size-0;
    background-color: $faded-green;
  }

  &__input {
    top: -30px;
    float: right;
    padding: 3px 16px;
    margin-right: 0.2em;

    &--absolute {
      position: absolute;
      right: 3px;
      top: 3px;
      height: 27px;
      padding: 0px 5px;
    }
  }

  // Button Modifiers
  &--expanded {
    display: block;
    width: 100%;
  }

  &--full {
    @extend #{$this}--expanded;
    clear: both;
  }

  &--no-padding {
    padding: 0;
  }

  &--no-radius {
    border-radius: 0;
  }

  &--opposite {
    $b-bw: 2px 0 2px 2px;
    $a-bw: 2px 2px 2px 0;

    &:before {
      border-width: $b-bw;
      @include position(0px, auto, 0px, -9px);
      width: $size-5;
      transform: none;
    }

    &:after {
      border-width: $a-bw;
      @include position(0px);
      width: auto;
      transform: skew(-15deg);
    }
  }

  &--loading {
    display: inline-flex;
    align-items: center;
    pointer-events: none;

    &::before {
      @extend %loader;
      @include animation(loading);
    }
  }

  &--sm {
    padding: map-get($button-sizes, sm);
    font-size: text-scale('sm');
  }

  &--md {
    padding: map-get($button-sizes, md);
    font-size: text-scale('md');
  }

  &--lg {
    padding: map-get($button-sizes, lg);
    font-size: text-scale('lg');

    @include --breakpoint(tablet) {
      padding: map-get($button-sizes, xtra);
      font-size: text-scale('xl');
    }
  }

  &--squared {
    border-radius: 0px;
  }

  &--clear {
    $size: $size-1 / 2 + 1;
    border: 0;
    background: none;
    border-radius: 0;
    cursor: pointer;
    padding: $size $size 0 0;
  }
}
